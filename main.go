package main

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"text/template"

	"go-avatar/internal/handlers"
	"go-avatar/internal/images"

	"github.com/gorilla/mux"
)

var gitCommit string

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}
func init() {
	images.Init()

	f, err := os.Create("gitversion.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	tpl := template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// This file was generated by a tool, not manually.
package main

var gitCommit = "{{.GitCommit}}"
`))

	data := struct {
		GitCommit string
	}{
		GitCommit: os.Getenv("GIT_COMMIT"),
	}

	if err := tpl.Execute(f, data); err != nil {
		panic(err)
	}
	fmt.Println("Git commit:", data.GitCommit)
}

//go:embed static/dist
var app embed.FS

func main() {
	r := mux.NewRouter()

	dist, err := fs.Sub(app, "static/dist")
	if err != nil {
		log.Fatalf("sub error")
		return
	}
	r.Handle("/", http.FileServer(http.FS(dist)))
	//	r.HandleFunc("/", handlers.IndexHandler)
	r.HandleFunc("/avatar", handlers.AvatarHandler).Methods("GET")

	//r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir("/app/static"))))

	log.Println("Server started on http://localhost:8055")
	log.Fatal(http.ListenAndServe(":8055", r))
}
